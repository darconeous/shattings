#!/bin/sh
#
# IMPORTANT
# =========
#
# This file contains code obtained from multiple sources. The following
# disclaimer applies to all parts of this file *EXCEPT* those sections
# noted otherwise.
#
# This file was written by Robert Quattlebaum <darco@deepdarc.com>.
# 
# This work is provided as-is. Unless otherwise provided in writing,
# Robert Quattlebaum makes no representations or warranties of any
# kind concerning this work, express, implied, statutory or otherwise,
# including without limitation warranties of title, merchantability,
# fitness for a particular purpose, non infringement, or the absence
# of latent or other defects, accuracy, or the present or absence of
# errors, whether or not discoverable, all to the greatest extent
# permissible under applicable law.
# 
# To the extent possible under law, Robert Quattlebaum has waived all
# copyright and related or neighboring rights to this work. This work
# is published from the United States.
# 
# I, Robert Quattlebaum, dedicate any and all copyright interest in
# this work to the public domain. I make this dedication for the
# benefit of the public at large and to the detriment of my heirs and
# successors. I intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to
# this code under copyright law. In jurisdictions where this is not
# possible, I hereby release this code under the Creative Commons
# Zero (CC0) license.
# 
#  * <http://creativecommons.org/publicdomain/zero/1.0/>
#

# ------------------------------------------------------------------
# This section is based on a snippit of init.sh from Fink.
# It has been modified slightly to behave better on non-mac
# systems.
#
# Fink - a package manager that downloads source and installs it
# Copyright (c) 2001 Christoph Pfisterer
# Copyright (c) 2001-2004 The Fink Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA   
# 02111-1307, USA.
#

# add to end of path
append_path()
{
  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ; then
    eval "$1=\"\$$1:$2\""
  else
    if eval test -z '"$'$1'"' ; then
	  eval "$1=\"$2\""
	fi
  fi
}

# add to front of path
prepend_path()
{
  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ; then
    eval "$1=\"$2:\$$1\""
  else
    if eval test -z '"$'$1'"' ; then
	  eval "$1=\"$2\""
	fi
  fi
}

# END FINK SECTION
# ------------------------------------------------------------------

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

UNAME=`uname`

case "$USER" in
	rquattle*|darco|apple|admin)
		# Darco's defaults.
		# If you want these, you should set them in your
		# bashrc script before these lines are executed.
		export SHATTINGS_HISTORY=${SHATTINGS_HISTORY-1}
		export SHATTINGS_TABS=${SHATTINGS_TABS-1}
		export SHATTINGS_EDITOR_VI=${SHATTINGS_EDITOR_VI-1}
		export SHATTINGS_GNUPG_SSH=${SHATTINGS_GNUPG_SSH-$([ ! $UNAME = "Darwin" ] ; echo $?)}
		;;
esac

# No lang? Assume `en_us.UTF-8`.
# Warning: This may break some scripts!
# If you run into problems, set this to LANG=C
LANG=${LANG-en_US.UTF-8}

isolate_history () {
	export PROMPT_COMMAND=""
	export HISTFILE=""
}

[[ "$SHATTINGS_HISTORY" == 1 ]] && {
	shopt -s histappend
	#export PROMPT_COMMAND='history -a && history -n'
	export HISTCONTROL="ignoredups"
	export HISTFILESIZE=500000
	unset HISTTIMEFORMAT
}

set mark-directories On 2> /dev/null
set mark-symlinked-directories On 2> /dev/null
set completion-ignore-case On 2> /dev/null

# turn off history expansion
set +H

# Setup tabs
[[ "$SHATTINGS_TABS" == 1 ]] && {
	export TABWIDTH=4
	export LS_COLWIDTHS=$TABWIDTH
	tabs -$TABWIDTH > /dev/null 2>&1
	alias less="less -x $TABWIDTH"
	export PAGER='less -x $TABWIDTH'
}

# If this isn't a remote SSH connection...
if [[ "$SSH_CONNECTION" == "" && "$SHATTINGS_GNUPG_SSH" == 1 ]]
then
	if [[ "$SSH_AUTH_SOCK" != "" ]]
	then export ORIGINAL_SSH_AUTH_SOCK="$SSH_AUTH_SOCK"
	fi

	if [ -f "${HOME}/.gpg-agent-info" ]; then
		. ~/.gpg-agent-info
	else [ -e ~/.gnupg/S.gpg-agent.ssh ]
		SSH_AUTH_SOCK=~/.gnupg/S.gpg-agent.ssh
		unset SSH_AGENT_PID
	fi
fi

# GlobalPlatform Utility shortcut
if [ -f ~/Projects/GlobalPlatformPro/gp.jar ]
then
	export GP="java -jar ~/Projects/GlobalPlatformPro/gp.jar"
	alias gp="java -jar ~/Projects/GlobalPlatformPro/gp.jar"
elif [ -f ~/Projects/SmartCardDev/GlobalPlatformPro/gp.jar ]
then alias gp="java -jar ~/Projects/SmartCardDev/GlobalPlatformPro/gp.jar"
elif [ -f ~/Projects/JCOP/GlobalPlatformPro/gp.jar ]
then alias gp="java -jar ~/Projects/JCOP/GlobalPlatformPro/gp.jar"
fi

if [[ $UNAME == "Darwin" ]]
then
	# OS X doesn't have a `tac` command. This line provides it.
	alias tac="sed '1!G;h;"'$'"!d'"

	alias sleepless="pmset -g assertions | egrep '(PreventUserIdleSystemSleep|PreventUserIdleDisplaySleep)'"

	# Airport utility shortcut
	[ -x /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport ] && {
		alias airport=/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport
	}

	# GPG Shortcut
	[ -x /usr/local/MacGPG2/bin/gpg2 ] && {
		append_path PATH /usr/local/MacGPG2/bin
		append_path MANPATH /usr/local/MacGPG2/share/man
		alias gpg2=/usr/local/MacGPG2/bin/gpg2
		alias gpg=/usr/local/MacGPG2/bin/gpg2
		export GPG=/usr/local/MacGPG2/bin/gpg2
	}

	if ! which -s yubico-piv-tool
	then [ -x "/Applications/YubiKey PIV Manager.app/Contents/MacOS/yubico-piv-tool" ] && {
		alias yubico-piv-tool="/Applications/YubiKey\ PIV\ Manager.app/Contents/MacOS/yubico-piv-tool"
	}
	fi

	if ! which -s ykman
	then [ -x "/Applications/YubiKey Manager.app/Contents/MacOS/ykman" ] && {
		alias ykman="/Applications/YubiKey\ Manager.app/Contents/MacOS/ykman"
	}
	fi

	# Set up the default developer directory
	which -s "xcode-select" && DEVELOPER_DIR="$(xcode-select --print-path)"

	# If we have Xcode installed, then set up a bunch more stuff.
	[ -d "$DEVELOPER_DIR" ] && {
		# Add the developer tools to the path
		append_path PATH "$DEVELOPER_DIR"/usr/bin
		append_path PATH "$DEVELOPER_DIR"/Tools

		# Add general man pages
		append_path MANPATH "$DEVELOPER_DIR"/usr/share/man
		append_path MANPATH "$DEVELOPER_DIR"/usr/subversion-*/share/man
		append_path MANPATH "$DEVELOPER_DIR"/Toolchains/XcodeDefault.xctoolchain/usr/share/man
		append_path MANPATH "$DEVELOPER_DIR"/Platforms/iPhoneOS.platform/usr/local/share/man
		append_path MANPATH "$DEVELOPER_DIR"/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/share/man

		# Add all OS X man pages
		for X in "$DEVELOPER_DIR"/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.*.sdk
		do append_path MANPATH $X/usr/share/man
		done

		# If we have a copy of xcode available, alias to "edit"
		which -s xed && alias edit='xed'

		if [ -x ~/Applications/Development/GitX.app/Contents/Resources/gitx ]
		then alias gitx=~/Applications/Development/GitX.app/Contents/Resources/gitx
		elif [ -x ~/Applications/GitX.app/Contents/Resources/gitx ]
		then alias gitx=~/Applications/GitX.app/Contents/Resources/gitx
		elif [ -x /Applications/GitX.app/Contents/Resources/gitx ]
		then alias gitx=/Applications/GitX.app/Contents/Resources/gitx
		fi
	}

	# If we have OpenSCAD installed, then alias the openscad command.
	if [ -x ~/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD ]
	then
		alias openscad=~/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD
		append_path PATH ~/Applications/OpenSCAD.app/Contents/MacOS
	elif [ -x /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD ]
	then
		alias openscad=/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD
		append_path PATH /Applications/OpenSCAD.app/Contents/MacOS
	fi

	# Slic3r.app/Contents/MacOS/slic3r
	if [ -x ~/Applications/Slic3r.app/Contents/MacOS/slic3r ]
	then
		alias slic3r=~/Applications/Slic3r.app/Contents/MacOS/slic3r
		append_path PATH ~/Applications/Slic3r.app/Contents/MacOS
	elif [ -x /Applications/Slic3r.app/Contents/MacOS/slic3r ]
	then
		alias slic3r=/Applications/Slic3r.app/Contents/MacOS/slic3r
		append_path PATH /Applications/Slic3r.app/Contents/MacOS
	fi

	# Convenient command for merging PDF documents
	alias join='"/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py"'

	# make svn use opendiff
	export SVN_MERGE=~/.shattings/bin/svn-diff-wrapper

	# Quick way to rebuild the Launch Services database and get rid
	# of duplicates in the Open With submenu.
	# <http://www.leancrew.com/all-this/2013/02/getting-rid-of-open-with-duplicates/>
	alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

	### RETIRED DARWIN SETUP AFTER THIS POINT ###

	# append_path C_INCLUDE_PATH /usr/local/include
	# append_path CPLUS_INCLUDE_PATH /usr/local/include
	# append_path LIBRARY_PATH /usr/local/lib

	# export C_INCLUDE_PATH
	# export CPLUS_INCLUDE_PATH
	# export LIBRRAY_PATH

	#prepend_path DYLD_FRAMEWORK_PATH /usr/local/lib
	#export DYLD_FRAMEWORK_PATH

	#[ -z "$CC" ] && {
	#	which -s cc || export CC=gcc
	#}

	# Grab any recently updated environment variables from launchd
	#eval `launchctl export` 2> /dev/null

	# Set up the developer directory
	# which -s "xcode-select" && DEVELOPER_DIR="$(xcode-select --print-path)"

	# Set up alias for XMPP command
	#[ -x "/System/Library/PrivateFrameworks/VCXMPP.framework/Versions/A/Resources/xmpp" ] && {
	#	alias xmpp="/System/Library/PrivateFrameworks/VCXMPP.framework/Versions/A/Resources/xmpp" ;
	#}

fi

# enable color support of ls and also add handy aliases
if [[ "$TERM" != "dumb" ]]
then
	# Have GNU 'ls' use colors.
	ls --version > /dev/null 2>&1 && alias ls='ls --color=auto'

	# Have BSD 'ls' use GNU colors.
	export LSCOLORS=ExGxBxdxCxDxdxabagacad
	export CLICOLOR=1
	
	# Grep color
	if  ( echo testing-color | grep --color=auto testing-color 1> /dev/null 2> /dev/null )
	then
		alias grep="grep --color=auto"
		alias egrep="egrep --color=auto"
	fi
fi

# VIM-based 'less'
VLESS=${VLESS-`fn() { echo $1; } ; fn /usr/share/vim/vim*/macros/less.sh`}

[ -x "$VLESS" ] && {
	alias vless="$VLESS"

	# Uncomment if you really want this to be your pager.
	#PAGER="$VLESS"
}

# DOSism...
alias "cd.."='cd ..'

# We like VI.
if ( which vim > /dev/null 2>&1 )
then
	[[ ${SHATTINGS_EDITOR_VI} == 1 ]] && EDITOR=${EDITOR-"vim"}

	alias vi=vim
elif ( which vi > /dev/null 2>&1 )
then
	[[ ${SHATTINGS_EDITOR_VI} == 1 ]] && EDITOR=${EDITOR-"vi"}
fi

# For DocBook stuff.
[ -f /usr/local/etc/xml/catalog ] && export XML_CATALOG_FILES="/usr/local/etc/xml/catalog"

prepend_path PATH /usr/local/sbin
prepend_path PATH /usr/local/bin

append_path PATH /sbin
append_path PATH /bin

append_path MANPATH /usr/local/share/man
append_path PKG_CONFIG_PATH /usr/local/lib/pkgconfig

append_path PATH /usr/sbin
append_path PATH /usr/bin
append_path MANPATH /usr/share/man
append_path PKG_CONFIG_PATH /usr/lib/pkgconfig

for X in /usr/X11*
do
	append_path PATH /usr/${X}/bin
	append_path MANPATH /usr/${X}/man
	append_path PKG_CONFIG_PATH /usr/${X}/lib/pkgconfig
done

append_path PATH ~/.shattings/bin
append_path MANPATH ~/.shattings/share/man

prepend_path PATH ~/bin
prepend_path MANPATH ~/share/man
append_path PKG_CONFIG_PATH ~/lib/pkgconfig

#prepend_path PYTHONPATH /usr/local/lib/python2.7/site-packages

if [ -d ~/homebrew ]
then
	append_path PATH ~/homebrew/bin
	append_path PATH ~/homebrew/sbin
	append_path MANPATH ~/homebrew/share/man
	append_path PKG_CONFIG_PATH ~/homebrew/lib/pkgconfig
fi

export GIT_SSH=~/.shattings/bin/git-ssh.sh

export GPG_AGENT_INFO
export SSH_AUTH_SOCK
export SSH_AGENT_PID
export PYTHONPATH
export EDITOR
export PATH
export PKG_CONFIG_PATH
export MANPATH
export LIBRARY_PATH
export CPATH
export LANG

# Enable fancy command line
. ~/.shattings/bash/ps1-git-svn.sh

# Enable GIT tab completion
. ~/.shattings/bash/git-completion.bash

# Enable man page tab completion
. ~/.shattings/bash/man-completion.bash

# Enable ssh tab completion
. ~/.shattings/bash/ssh-completion.bash

# Enable homebrew tab completion (if present)
( which brew > /dev/null 2>&1 ) && [ -f "`brew --repository`/Library/Contributions/brew_bash_completion.sh" ] &&  . `brew --repository`/Library/Contributions/brew_bash_completion.sh

export PS1

[ -f /usr/local/etc/bash_completion.d/tmux ] && . /usr/local/etc/bash_completion.d/tmux
