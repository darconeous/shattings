
" Override default options
set nocompatible	" we want vim's features, not stupid vi compatiblity
set ruler		" shows ruler at the bottom of the screen
set bs=2		" allow backspacing over everything in insert mode
set tabstop=4		" Set tabs to 4 spaces
set autoindent		" we want to autoindent
set sts=4 sw=4 ts=4 noet
set number	" to show line numbers
set wrap	" enable line wrapping
set nocp
set showcmd		" Show (partial) command in status line
set hlsearch		" Switch on syntax highlighting.
set incsearch		" show matches on the fly
set ignorecase		" for pattern machine
set smartcase		" Except when a mix of case is given
"set exrc
set secure
set wildmenu
set backspace=indent,eol,start
"set textwidth=80

"set swapsync=sync	" the swap is synced with sync, not fsync
set swapsync=""
set updatecount=200	" Number of characters typed before doing an update
set updatetime=5000	" Number of milliseconds before doing an update
set history=100		" Number of history commands to remember
set viminfo='50,\"200	" read/write a .viminfo file, remember filemarks for 50
			" files and store 200 lines of registers

if has("mouse")
"	set mouse=a
	set mousemodel=popup
endif

let mapleader = "-"

" https://github.com/tpope/vim-pathogen
execute pathogen#infect()

runtime! ftplugin/man.vim

if has("filetype")
	filetype plugin on
endif

if has("autocmd")
	so ~/.shattings/vim/plist.vim
	so ~/.shattings/vim/autocmd.vim
	so ~/.shattings/vim/bracketed-paste.vim
endif

if has("syntax")
	let c_space_errors=1 " make blank spaces at EOL red
endif

"set clipboard=unnamed

so ~/.shattings/vim/clipboard.vim
so ~/.shattings/vim/fuchsia.vim

" For debugging
"set verbose=9

" If bash is called sh on the system, define this
"let bash_is_sh=1

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

"
" Key mappings
"

" Key mappings for par (text reformatting)
"vmap  !par -w76 -gjq -dh -p3
"vmap X !par -w76 -gjq -p2 -dh<CR>
"vmap F !par -w76 -gjq<CR>
"vmap f !par -w80<CR>
"imap  :set invpaste<CR>a
"map  :set invpaste<CR>o

" So what, I can't type...
nmap :W :w
nmap :X :x
nmap :Q :q

nnoremap ,mdfmt :silent :%!mdfmt<CR>

" Call the external spell module (with uses ispell)
" so /etc/vim/vimspell.vim

" Enable and disable highlighted spell checking
"map <F10> :so /etc/vim/engspchk.vim<CR>
"map <F12> :hi link BadWord none<CR>

" Move cursor by lines on *screen* instead of lines in *file*
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

"if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
"  set t_Co=16
"  set t_Sf=[3%dm
"  set t_Sb=[4%dm
"endif

" Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>

set background=dark

" We kind of want color syntaxing in text mode too :-)
if &t_Co > 2 || has("gui_running")
	syntax on
endif

" Really fancy status line from Sven Guckes
" From http://www.vim.org/vimrc
set   statusline=Vim-%{Version()}\ %{getcwd()}\ \ %1*[%02n]%*\ %(%M%R%H%)\ %2*%F%*\ %=%{Options()}\ %3*<%l,%c%V>%*
" Text between "%{" and "%}" is being evaluated and thus suited for functions.
" Here I will use the function "Options()" as defined below to show the
" values of some (local) options..
" The strings "%N*" unto "%*" correspond to the highlight group "UserN":
"       User1: color for buffer number
  hi    User1 cterm=NONE    ctermfg=red    ctermbg=white  guifg=red    guibg=white
"       User2: color for filename
  hi    User2 cterm=NONE    ctermfg=black  ctermbg=green  guifg=black  guibg=green
"       User3: color for position
  hi    User3 cterm=NONE    ctermfg=blue   ctermbg=white  guifg=blue   guibg=white



command! -nargs=0 Am cexpr system(". ${ANDROID_BUILD_TOP}/build/envsetup.sh && TERM=dumb m -w")
command! -nargs=0 Ama cexpr system(". ${ANDROID_BUILD_TOP}/build/envsetup.sh && TERM=dumb ma -w")
command! -nargs=0 Amm cexpr system(". ${ANDROID_BUILD_TOP}/build/envsetup.sh && TERM=dumb mm -w")
command! -nargs=0 Amma cexpr system(". ${ANDROID_BUILD_TOP}/build/envsetup.sh && TERM=dumb mma -w")

" http://vim.wikia.com/wiki/Create_underlines,_overlines,_and_strikethroughs_using_combining_characters
" modify selected text using combining diacritics
command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')
function! s:CombineSelection(line1, line2, cp)
  execute 'let char = "\u'.a:cp.'"'
  execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
endfunction

set listchars=eol:‚èé,tab:‚êâ¬∑,trail:‚ê†,nbsp:‚éµ
nmap <leader>l :set invlist<cr>

set dictionary+=/usr/share/dict/words
"set encoding=utf-8 fileencodings

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
