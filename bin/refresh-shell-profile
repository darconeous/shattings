#!/bin/sh
#
# IMPORTANT
# =========
#
# This file contains code obtained from multiple sources. The following
# disclaimer applies to all parts of this file *EXCEPT* those sections
# noted otherwise.
#
# This file was written by Robert Quattlebaum <darco@deepdarc.com>.
# 
# This work is provided as-is. Unless otherwise provided in writing,
# Robert Quattlebaum makes no representations or warranties of any
# kind concerning this work, express, implied, statutory or otherwise,
# including without limitation warranties of title, merchantability,
# fitness for a particular purpose, non infringement, or the absence
# of latent or other defects, accuracy, or the present or absence of
# errors, whether or not discoverable, all to the greatest extent
# permissible under applicable law.
# 
# To the extent possible under law, Robert Quattlebaum has waived all
# copyright and related or neighboring rights to this work. This work
# is published from the United States.
# 
# I, Robert Quattlebaum, dedicate any and all copyright interest in
# this work to the public domain. I make this dedication for the
# benefit of the public at large and to the detriment of my heirs and
# successors. I intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to
# this code under copyright law. In jurisdictions where this is not
# possible, I hereby release this code under the Creative Commons
# Zero (CC0) license.
# 
#  * <http://creativecommons.org/publicdomain/zero/1.0/>
#


# add to end of path
append_path()
{
    echo append_path "$@" '2> /dev/null'
}

# add to front of path
prepend_path()
{
    echo prepend_path "$@" '2> /dev/null'
}

# exports this environment variable
export_env_var()
{
    echo export \"`echo $1 | quote_escape`\"
    export "`echo $1 | quote_escape`"
}

# unsets this environment variable
unset_env_var()
{
    echo unset \""$1"\"
}

set_shell_var()
{
	echo set "$@" '2> /dev/null'
}

set_shopt()
{
    echo shopt "$@" '2> /dev/null'
}

do_shellcmd()
{
    echo "$@"
}

shell_escape() {
	sed 's/\([-\\ $()|!"'\'']\)/\\\1/g'
}

quote_escape() {
	sed 's/\("\)/\\\1/g'
}

set_alias()
{
	echo alias \"`echo $1 | quote_escape`\"
}

UNAME="`uname`"

do_shellcmd . ~/.shattings/bash/myfuncs.sh
do_shellcmd . ~/.shattings/third_party/append_prepend.sh

case "$USER" in
	rquattle*|darco|apple|admin)
		# Darco's defaults.
		# If you want these, you should set them in your
		# bashrc script before these lines are executed.
		export SHATTINGS_HISTORY=${SHATTINGS_HISTORY-1}
		export SHATTINGS_TABS=${SHATTINGS_TABS-1}
		export SHATTINGS_EDITOR_VI=${SHATTINGS_EDITOR_VI-1}
		export SHATTINGS_GNUPG_SSH=${SHATTINGS_GNUPG_SSH-$([ ! $UNAME = "Darwin" ] ; echo $?)}
		;;
esac

export_env_var LANG="${LANG-en_US.UTF-8}"

[[ "$SHATTINGS_HISTORY" == 1 ]] && {
	set_shopt -s histappend
	
	#export_env_var PROMPT_COMMAND='history -a && history -n'
	export_env_var HISTCONTROL="ignoredups"
	export_env_var HISTFILESIZE=500000
	unset_env_var HISTTIMEFORMAT
}

set_shell_var mark-directories On
set_shell_var mark-symlinked-directories On
set_shell_var completion-ignore-case On

set_shell_var +H

# Setup tabs
[[ "$SHATTINGS_TABS" == 1 ]] && {
	export_env_var TABWIDTH=4
	export_env_var LS_COLWIDTHS=$TABWIDTH
	do_shellcmd tabs -$TABWIDTH '> /dev/null 2>&1'
	set_alias less="less -x $TABWIDTH"
	export_env_var PAGER="less -x $TABWIDTH"
}


# GlobalPlatform Utility shortcut
if [ -f "$HOME"/Projects/GlobalPlatformPro/gp.jar ]
then
	export_env_var GP_JAR="$HOME"/Projects/GlobalPlatformPro/gp.jar
elif [ -f "$HOME"/Projects/SmartCardDev/GlobalPlatformPro/gp.jar ]
then
	export_env_var GP_JAR="$HOME"/Projects/SmartCardDev/GlobalPlatformPro/gp.jar
elif [ -f "$HOME"/Projects/JCOP/GlobalPlatformPro/gp.jar ]
then 
	export_env_var GP_JAR="$HOME"/Projects/JCOP/GlobalPlatformPro/gp.jar
fi

export_env_var GP="java -jar ${GP_JAR}"
set_alias gp="java -jar ${GP_JAR}"

if [[ $UNAME == "Darwin" ]]
then
	# OS X doesn't have a `tac` command. This line provides it.
	set_alias tac="sed '1!G;h;"'$'"!d'"
	set_alias sleepless="pmset -g assertions | egrep '(PreventUserIdleSystemSleep|PreventUserIdleDisplaySleep)'"

	# Airport utility shortcut
	[ -x /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport ] && {
		set_alias airport=/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport
	}

	# GPG Shortcut
	[ -x /usr/local/MacGPG2/bin/gpg2 ] && {
		append_path PATH /usr/local/MacGPG2/bin
		append_path MANPATH /usr/local/MacGPG2/share/man
		set_alias gpg2=/usr/local/MacGPG2/bin/gpg2
		set_alias gpg=/usr/local/MacGPG2/bin/gpg2
		export_env_var GPG=/usr/local/MacGPG2/bin/gpg2
	}

	if ! which -s yubico-piv-tool
	then [ -x "/Applications/YubiKey PIV Manager.app/Contents/MacOS/yubico-piv-tool" ] && {
		set_alias yubico-piv-tool="/Applications/YubiKey PIV Manager.app/Contents/MacOS/yubico-piv-tool"
	}
	fi

	if ! which -s ykman
	then [ -x "/Applications/YubiKey Manager.app/Contents/MacOS/ykman" ] && {
		set_alias ykman=/Applications/YubiKey\ Manager.app/Contents/MacOS/ykman
	}
	fi

	# Set up the default developer directory
	which -s "xcode-select" && DEVELOPER_DIR="`xcode-select --print-path`"

	# If we have Xcode installed, then set up a bunch more stuff.
	[ -d "$DEVELOPER_DIR" ] && {
		# Add the developer tools to the path
		append_path PATH "$DEVELOPER_DIR"/usr/bin
		append_path PATH "$DEVELOPER_DIR"/Tools

		# Add general man pages
		append_path MANPATH "$DEVELOPER_DIR"/usr/share/man
		append_path MANPATH "$DEVELOPER_DIR"/Toolchains/XcodeDefault.xctoolchain/usr/share/man
		append_path MANPATH "$DEVELOPER_DIR"/Platforms/iPhoneOS.platform/usr/local/share/man
		append_path MANPATH "$DEVELOPER_DIR"/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/share/man

		# Add all OS X man pages
		for X in "$DEVELOPER_DIR"/Platforms/MacOSX.platform/Developer/SDKs/MacOSX*.sdk
		do append_path MANPATH $X/usr/share/man
		done

		# If we have a copy of xcode available, alias to "edit"
		which -s xed && set_alias edit='xed'

		if [ -x ~/Applications/Development/GitX.app/Contents/Resources/gitx ]
		then set_alias gitx=~/Applications/Development/GitX.app/Contents/Resources/gitx
		elif [ -x ~/Applications/GitX.app/Contents/Resources/gitx ]
		then set_alias gitx=~/Applications/GitX.app/Contents/Resources/gitx
		elif [ -x /Applications/GitX.app/Contents/Resources/gitx ]
		then set_alias gitx=/Applications/GitX.app/Contents/Resources/gitx
		fi
	}

	# If we have OpenSCAD installed, then alias the openscad command.
	if [ -x ~/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD ]
	then
		set_alias openscad=~/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD
		append_path PATH ~/Applications/OpenSCAD.app/Contents/MacOS
	elif [ -x /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD ]
	then
		set_alias openscad=/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD
		append_path PATH /Applications/OpenSCAD.app/Contents/MacOS
	fi

	# Slic3r.app/Contents/MacOS/slic3r
	if [ -x ~/Applications/Slic3r.app/Contents/MacOS/slic3r ]
	then
		set_alias slic3r=~/Applications/Slic3r.app/Contents/MacOS/slic3r
		append_path PATH ~/Applications/Slic3r.app/Contents/MacOS
	elif [ -x /Applications/Slic3r.app/Contents/MacOS/slic3r ]
	then
		set_alias slic3r=/Applications/Slic3r.app/Contents/MacOS/slic3r
		append_path PATH /Applications/Slic3r.app/Contents/MacOS
	fi

	# Convenient command for merging PDF documents
	set_alias join="/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py"

	# make svn use opendiff
	export_env_var SVN_MERGE=~/.shattings/bin/svn-diff-wrapper

	# Quick way to rebuild the Launch Services database and get rid
	# of duplicates in the Open With submenu.
	# <http://www.leancrew.com/all-this/2013/02/getting-rid-of-open-with-duplicates/>
	set_alias fixopenwith='/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user'

fi

# enable color support of ls and also add handy aliases
if [[ "$TERM" != "dumb" ]]
then
	# Have GNU 'ls' use colors.
	ls --version > /dev/null 2>&1 && set_alias ls='ls --color=auto'

	# Have BSD 'ls' use GNU colors.
	export_env_var LSCOLORS=ExGxBxdxCxDxdxabagacad
	export_env_var CLICOLOR=1
	
	# Grep color
	if  ( echo testing-color | grep --color=auto testing-color 1> /dev/null 2> /dev/null )
	then
		set_alias grep="grep --color=auto"
		set_alias egrep="egrep --color=auto"
	fi
fi

# VIM-based 'less'
VLESS=${VLESS-`fn() { echo $1; } ; fn /usr/share/vim/vim*/macros/less.sh`}

[ -x "$VLESS" ] && {
	set_alias vless="$VLESS"

	# Uncomment if you really want this to be your pager.
	#export_env_var PAGER="$VLESS"
}

# DOSism...
set_alias "cd.."='cd ..'

# We like VI.
if ( which vim > /dev/null 2>&1 )
then
	[[ ${SHATTINGS_EDITOR_VI} == 1 ]] && export_env_var EDITOR=${EDITOR-"vim"}

	alias vi=vim
elif ( which vi > /dev/null 2>&1 )
then
	[[ ${SHATTINGS_EDITOR_VI} == 1 ]] && export_env_var EDITOR=${EDITOR-"vi"}
fi

# For DocBook stuff.
[ -f /usr/local/etc/xml/catalog ] && export_env_var  XML_CATALOG_FILES="/usr/local/etc/xml/catalog"

prepend_path PATH /usr/local/sbin
prepend_path PATH /usr/local/bin

append_path PATH /sbin
append_path PATH /bin

append_path MANPATH /usr/local/share/man
append_path PKG_CONFIG_PATH /usr/local/lib/pkgconfig

append_path PATH /usr/sbin
append_path PATH /usr/bin
append_path MANPATH /usr/share/man
append_path PKG_CONFIG_PATH /usr/lib/pkgconfig

for X in /usr/X11*
do
	append_path PATH /usr/${X}/bin
	append_path MANPATH /usr/${X}/man
	append_path PKG_CONFIG_PATH /usr/${X}/lib/pkgconfig
done

append_path PATH ~/.shattings/bin
append_path MANPATH ~/.shattings/share/man

prepend_path PATH ~/bin
prepend_path MANPATH ~/share/man
append_path PKG_CONFIG_PATH ~/lib/pkgconfig

prepend_path PYTHONPATH /usr/local/lib/python2.7/site-packages

if [ -d "$HOME"/homebrew ]
then
	append_path PATH "$HOME"/homebrew/bin
	append_path PATH "$HOME"/homebrew/sbin
	append_path MANPATH "$HOME"/homebrew/share/man
	append_path PKG_CONFIG_PATH "$HOME"/homebrew/lib/pkgconfig
fi

export_env_var GIT_SSH=$HOME/.shattings/bin/git-ssh.sh

export_env_var GPG_AGENT_INFO
export_env_var SSH_AUTH_SOCK
export_env_var SSH_AGENT_PID
export_env_var PYTHONPATH
export_env_var EDITOR
export_env_var PATH
export_env_var PKG_CONFIG_PATH
export_env_var MANPATH
export_env_var LIBRARY_PATH
export_env_var CPATH
export_env_var LANG

# Enable fancy command line
#do_shellcmd . ~/.shattings/bash/ps1-git-svn.sh

# Enable GIT tab completion
#do_shellcmd . ~/.shattings/bash/git-completion.bash

# Enable man page tab completion
#do_shellcmd . ~/.shattings/bash/man-completion.bash

# Enable ssh tab completion
#do_shellcmd . ~/.shattings/bash/ssh-completion.bash

# Enable homebrew tab completion (if present)
#( which brew > /dev/null 2>&1 ) && [ -f "`brew --repository`/Library/Contributions/brew_bash_completion.sh" ] &&  do_shellcmd . `brew --repository`/Library/Contributions/brew_bash_completion.sh

#export_env_var PS1

[ -f /usr/local/etc/bash_completion.d/tmux ] && do_shell_cmd . /usr/local/etc/bash_completion.d/tmux
